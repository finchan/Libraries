package com.xavier.webservices.upandrunning.ch04.team.client;

import com.xavier.webservices.upandrunning.ch04.team.NSResolver;

import javax.xml.namespace.QName;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.ws.Dispatch;
import javax.xml.ws.Service;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.http.HTTPBinding;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Map;

/**
 * Created by Xavier on 2018/2/1.
 */
public class DispatchClientSoapBased {

    public static void main(String [] args) {
        new DispatchClientSoapBased().send_and_receive_SOAP();
    }

    private void send_and_receive_SOAP() {
        URI ns_URI = null;
        try {
            ns_URI = new URI("http://ts.ch01.upandrunning.webservices.xavier.com/");
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        QName service_name = new QName("tns", ns_URI.toString());
        QName port = new QName("tsPort", ns_URI.toString());
        //QName(Service Name and Port) can be any string!!!
//        QName service_name = new QName("tns", "ABC");
//        QName port = new QName("tsPort", "ABC");
        String endpoint = "http://127.0.0.1:9876/ts";
        Service service = Service.create(service_name);
        service.addPort(port, HTTPBinding.HTTP_BINDING, endpoint);

        Dispatch<Source> dispatch =
                service.createDispatch(port, Source.class, Service.Mode.PAYLOAD);
        //Following request soap string can be generated by SOAPUI product
        String soap_request =
                "<?xml version='1.0' encoding='UTF-8'?>\n" +
                        "<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:ts='http://ts.ch01.upandrunning.webservices.xavier.com/'>\n" +
                        "   <soapenv:Header/>\n" +
                        "   <soapenv:Body>\n" +
                        "      <ts:getTimeAsEclapsed/>\n" +
                        "   </soapenv:Body>\n" +
                        "</soapenv:Envelope>";
        Map<String, Object> request_context = dispatch.getRequestContext();
        request_context.put(MessageContext.HTTP_REQUEST_METHOD, "POST");
        StreamSource source = make_stream_source(soap_request);
        Source result = dispatch.invoke(source);
        display_result(result, ns_URI.toString());
    }

    private void display_result(Source result, String uri) {
        DOMResult dom_result = new DOMResult();
        try{
            Transformer trans = TransformerFactory.newInstance().newTransformer();
            trans.transform(result, dom_result);
            XPathFactory xpf = XPathFactory.newInstance();
            XPath xp = xpf.newXPath();
            xp.setNamespaceContext(new NSResolver("tns", uri));
            String result_string = xp.evaluate("//return", dom_result.getNode());
            System.out.println(result_string);
        } catch (TransformerConfigurationException e) {
            e.printStackTrace();
        } catch (TransformerException e) {
            e.printStackTrace();
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
    }

    private StreamSource make_stream_source(String msg) {
        ByteArrayInputStream stream = new ByteArrayInputStream(msg.getBytes());
        return new StreamSource(stream);
    }
}
